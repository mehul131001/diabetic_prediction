# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CpiOdrbMM2bwQjKbgRQRTtxKt-psM2qc

importing the dependencies
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data colelction and analysis

PIMA Diabetes Dataset
"""

# loading the diabetes dataset to a panda dataframe

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# printing the first five rows of the dataset

diabetes_dataset.head()

# number of rows and columns in this dataset

diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non-diabetic 
1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean(
  
)

# seperating the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Train Test split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2, stratify=Y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train,Y_train)

"""Model evaluation

Accuracy score
"""

# accuracy score on the training data 
x_train_prediciton = classifier.predict(X_train)
training_data_accuracy = accuracy_score(x_train_prediciton, Y_train)

print('Accuracy score of the training data: ', training_data_accuracy*100)

# accuracy score on the training data 
x_test_prediciton = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(x_test_prediciton, Y_test)

print('Accuracy score of the testing data: ', testing_data_accuracy*100)

"""Making a predictive system"""

input_data = (4,110,92,0,0,37.6,0.191,30)

#change the data to numpy array

input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the data

std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("The person is not diabetic")
else:
  pritn("the person is diabetic")